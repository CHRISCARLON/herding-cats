"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6],{6584:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"explorers/nomis","title":"ONS Nomis Explorer","description":"The NomisCatExplorer class provides methods for exploring ONS Nomis data.","source":"@site/docs/explorers/nomis.md","sourceDirName":"explorers","slug":"/explorers/nomis","permalink":"/herding-cats/docs/explorers/nomis","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"French Government Explorer","permalink":"/herding-cats/docs/explorers/frenchgouv"},"next":{"title":"Data Loaders","permalink":"/herding-cats/docs/loaders"}}');var n=t(4848),o=t(8453);const r={sidebar_position:4},i="ONS Nomis Explorer",l={},d=[{value:"Creating a Nomis Explorer",id:"creating-a-nomis-explorer",level:2},{value:"Available Methods",id:"available-methods",level:2},{value:"Dataset Discovery",id:"dataset-discovery",level:3},{value:"Dataset Details",id:"dataset-details",level:3},{value:"Download URL Generation",id:"download-url-generation",level:3},{value:"Example Workflow",id:"example-workflow",level:2}];function c(e){const a={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(a.header,{children:(0,n.jsx)(a.h1,{id:"ons-nomis-explorer",children:"ONS Nomis Explorer"})}),"\n",(0,n.jsxs)(a.p,{children:["The ",(0,n.jsx)(a.code,{children:"NomisCatExplorer"})," class provides methods for exploring ONS Nomis data."]}),"\n",(0,n.jsx)(a.h2,{id:"creating-a-nomis-explorer",children:"Creating a Nomis Explorer"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-python",children:"import HerdingCats as hc\n\nwith hc.CatSession(hc.NomisDataCatalogues.ONS_NOMIS) as session:\n    explorer = hc.NomisCatExplorer(session)\n"})}),"\n",(0,n.jsx)(a.h2,{id:"available-methods",children:"Available Methods"}),"\n",(0,n.jsx)(a.h3,{id:"dataset-discovery",children:"Dataset Discovery"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-python",children:"# Returns a list of all available datasets\ndatasets = explorer.get_all_datasets()\n"})}),"\n",(0,n.jsx)(a.h3,{id:"dataset-details",children:"Dataset Details"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-python",children:'# Returns metadata for a specific dataset\ndataset_info = explorer.get_dataset_info("dataset_id")\n\n# Returns a list of codelists for a specific dataset\ncodelists = explorer.get_dataset_codelist("dataset_id")\n\n# Returns metadata for a specific codelist\ncodelist_info = explorer.get_codelist_meta_info("codelist_id")\n\n# Returns a dictionary of codelist values for a specific codelist\ncodelist_values = explorer.get_codelist_values(codelist_info)\n'})}),"\n",(0,n.jsx)(a.h3,{id:"download-url-generation",children:"Download URL Generation"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-python",children:'# Generates a full dataset download URL with optional geographic filtering\ndownload_url = explorer.generate_full_dataset_download_url(\n    "dataset_id",\n    geography_codes=[1234, 5678]\n)\n'})}),"\n",(0,n.jsx)(a.h2,{id:"example-workflow",children:"Example Workflow"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-python",children:'import HerdingCats as hc\nfrom loguru import logger\n\ndef main():\n    with hc.CatSession(hc.NomisDataCatalogues.ONS_NOMIS) as session:\n        explorer = hc.NomisCatExplorer(session)\n        loader = hc.NomisLoader()\n\n        # Get all datasets\n        datasets = explorer.get_all_datasets()\n\n        # Print dataset IDs\n        for dataset in datasets[:5]:  # Show first 5 for brevity\n            print(f"Dataset ID: {dataset}")\n\n        # Choose a dataset (e.g., "NM_2_1" - Census 2021 population estimates)\n        dataset_id = "NM_2_1"\n\n        # Get codelists for the dataset\n        codelists = explorer.get_dataset_codelist(dataset_id)\n\n        # Get metadata for the first codelist\n        if codelists:\n            codelist_meta = explorer.get_codelist_meta_info(codelists[0])\n\n            # Get codelist values\n            geo_types_with_codes = explorer.get_codelist_values(codelist_meta)\n\n            # Print available geography types\n            print("\\nAvailable geography types:")\n            for geo_type in geo_types_with_codes.keys():\n                print(f"- {geo_type}")\n\n            # Check if "unitary authority areas" is available\n            if "unitary authority areas" in geo_types_with_codes:\n                unitary_codes = geo_types_with_codes["unitary authority areas"]\n\n                # Generate download URL for unitary authorities\n                download_url = explorer.generate_full_dataset_download_url(\n                    dataset_id,\n                    geography_codes=unitary_codes[:5]  # First 5 for example\n                )\n\n                # Print the download URL\n                print(f"\\nGenerated download URL: {download_url}")\n\n                # Get available sheet names\n                sheets = loader.get_sheet_names(download_url)\n                print(f"\\nAvailable sheets: {sheets}")\n\n                # Load data from a specific sheet\n                if sheets:\n                    df = loader.polars_data_loader(\n                        download_url,\n                        sheet_name=sheets[0],\n                        skip_rows=9  # ONS data often has headers\n                    )\n                    print(f"\\nLoaded {len(df)} rows of data")\n\nif __name__ == "__main__":\n    main()\n'})})]})}function p(e={}){const{wrapper:a}={...(0,o.R)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},8453:(e,a,t)=>{t.d(a,{R:()=>r,x:()=>i});var s=t(6540);const n={},o=s.createContext(n);function r(e){const a=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function i(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),s.createElement(o.Provider,{value:a},e.children)}}}]);