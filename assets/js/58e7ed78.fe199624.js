"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[154],{1641:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>i,contentTitle:()=>l,default:()=>c,frontMatter:()=>r,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"explorers/opendatasoft","title":"OpenDataSoft Explorer","description":"The OpenDataSoftCatExplorer class provides methods for exploring OpenDataSoft-based data catalogues.","source":"@site/docs/explorers/opendatasoft.md","sourceDirName":"explorers","slug":"/explorers/opendatasoft","permalink":"/herding-cats/docs/explorers/opendatasoft","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"CKAN Explorer","permalink":"/herding-cats/docs/explorers/ckan"},"next":{"title":"French Government Explorer","permalink":"/herding-cats/docs/explorers/frenchgouv"}}');var o=t(4848),s=t(8453);const r={sidebar_position:2},l="OpenDataSoft Explorer",i={},d=[{value:"Creating an OpenDataSoft Explorer",id:"creating-an-opendatasoft-explorer",level:2},{value:"Available Methods",id:"available-methods",level:2},{value:"Basic Catalogue Information",id:"basic-catalogue-information",level:3},{value:"Dataset Discovery",id:"dataset-discovery",level:3},{value:"Dataset Details",id:"dataset-details",level:3},{value:"Example Workflow",id:"example-workflow",level:2}];function p(e){const a={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(a.header,{children:(0,o.jsx)(a.h1,{id:"opendatasoft-explorer",children:"OpenDataSoft Explorer"})}),"\n",(0,o.jsxs)(a.p,{children:["The ",(0,o.jsx)(a.code,{children:"OpenDataSoftCatExplorer"})," class provides methods for exploring OpenDataSoft-based data catalogues."]}),"\n",(0,o.jsx)(a.h2,{id:"creating-an-opendatasoft-explorer",children:"Creating an OpenDataSoft Explorer"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-python",children:"import HerdingCats as hc\n\nwith hc.CatSession(hc.OpenDataSoftDataCatalogues.UK_POWER_NETWORKS) as session:\n    explorer = hc.OpenDataSoftCatExplorer(session)\n"})}),"\n",(0,o.jsx)(a.h2,{id:"available-methods",children:"Available Methods"}),"\n",(0,o.jsx)(a.h3,{id:"basic-catalogue-information",children:"Basic Catalogue Information"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-python",children:"# Check the health of the OpenDataSoft site\nhealth = explorer.check_site_health()\n"})}),"\n",(0,o.jsx)(a.h3,{id:"dataset-discovery",children:"Dataset Discovery"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-python",children:"# Retrieve all datasets from an OpenDataSoft catalogue\ndatasets = explorer.fetch_all_datasets()\n"})}),"\n",(0,o.jsx)(a.h3,{id:"dataset-details",children:"Dataset Details"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-python",children:'# Get detailed metadata about a specific dataset\ndataset_info = explorer.show_dataset_info("dataset_id")\n\n# Get available export formats and download URLs\nexport_options = explorer.show_dataset_export_options("dataset_id")\n'})}),"\n",(0,o.jsx)(a.h2,{id:"example-workflow",children:"Example Workflow"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-python",children:'import HerdingCats as hc\n\ndef main():\n    with hc.CatSession(hc.OpenDataSoftDataCatalogues.UK_POWER_NETWORKS) as session:\n        explorer = hc.OpenDataSoftCatExplorer(session)\n\n        # Get all datasets\n        all_datasets = explorer.fetch_all_datasets()\n\n        # Print dataset names and IDs\n        for dataset in all_datasets:\n            print(f"Name: {dataset.get(\'dataset_id\', \'N/A\')}")\n\n        # Get export options for a specific dataset\n        dataset_id = all_datasets[0].get(\'dataset_id\') if all_datasets else None\n        if dataset_id:\n            export_options = explorer.show_dataset_export_options(dataset_id)\n\n            # Print available export formats\n            print("\\nAvailable export formats:")\n            for format_type, url in export_options.items():\n                print(f"- {format_type}")\n\n            # Create a loader and load data\n            loader = hc.OpenDataSoftLoader()\n\n            # Choose a format (e.g., "csv")\n            chosen_format = "csv"\n\n            # Load data into a Polars DataFrame\n            if chosen_format in export_options:\n                df = loader.polars_data_loader(export_options, format_type=chosen_format)\n                print(f"\\nLoaded {len(df)} rows of data")\n\nif __name__ == "__main__":\n    main()\n'})})]})}function c(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,o.jsx)(a,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},8453:(e,a,t)=>{t.d(a,{R:()=>r,x:()=>l});var n=t(6540);const o={},s=n.createContext(o);function r(e){const a=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function l(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),n.createElement(s.Provider,{value:a},e.children)}}}]);